#!/bin/bash
################################################################################
# WordPress Symlink Manager - Main Entry Point
#
# Description:
#   Interactive menu for WordPress symlink management. Guides users through
#   setup, configuration, and daily operations.
#
# Author: Eric Rasch
# Date Created: 2025-06-26
# Version: 1.0
#
# Usage:
#   ./wp-symlinks
#
################################################################################

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"
DEFAULT_WORKSPACE="$HOME/Sites/scripts/wp-symlinks"

log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

show_header() {
    clear
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}                  ${PURPLE}WordPress Symlink Manager${NC}                  ${CYAN}║${NC}"
    echo -e "${CYAN}║${NC}              ${BLUE}LocalWP ↔ GitHub Repository Tool${NC}              ${CYAN}║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
}

detect_workspace() {
    local possible_workspaces=(
        "$DEFAULT_WORKSPACE"
        "$HOME/.wp-symlinks"
        "$HOME/Documents/wp-tools"
        "./workspace"
    )
    
    for workspace in "${possible_workspaces[@]}"; do
        if [[ -d "$workspace" ]] && [[ -f "$workspace/enhanced-reset_wp_symlinks.sh" ]]; then
            echo "$workspace"
            return 0
        fi
    done
    
    return 1
}

show_status() {
    local workspace
    if workspace=$(detect_workspace); then
        log_success "Workspace found: $workspace"
        
        if [[ -f "$workspace/symlink-config.json" ]]; then
            local mapping_count
            mapping_count=$(jq '.mappings | length' "$workspace/symlink-config.json" 2>/dev/null || echo "0")
            log_info "Configuration: $mapping_count site mappings detected"
        else
            log_warning "No configuration file found"
        fi
        
        if [[ -d "$workspace/backups" ]]; then
            local backup_count
            backup_count=$(find "$workspace/backups" -name "*_[0-9]*_[0-9]*" -type d 2>/dev/null | wc -l)
            log_info "Backups: $backup_count backups available"
        fi
    else
        log_warning "No workspace found - setup needed"
    fi
    echo
}

show_menu() {
    echo -e "${YELLOW}What would you like to do?${NC}"
    echo
    echo "  ${GREEN}🚀 SETUP${NC}"
    echo "    1) Set up new workspace (first time)"
    echo "    2) Generate/update configuration"
    echo
    echo "  ${BLUE}📋 DAILY OPERATIONS${NC}"
    echo "    3) Run symlink sync (dry-run preview)"
    echo "    4) Run symlink sync (execute)"
    echo "    5) Interactive mode (for ambiguous matches)"
    echo
    echo "  ${PURPLE}🔧 MANAGEMENT${NC}"
    echo "    6) View current configuration"
    echo "    7) Restore from backup"
    echo "    8) View backup list"
    echo
    echo "  ${CYAN}📚 HELP${NC}"
    echo "    9) Show help and documentation"
    echo "    0) Exit"
    echo
    echo -n "Enter your choice (0-9): "
}

setup_workspace() {
    log_info "Setting up new workspace..."
    echo
    echo "Choose workspace location:"
    echo "  1) $DEFAULT_WORKSPACE (recommended)"
    echo "  2) ~/.wp-symlinks (hidden directory)"
    echo "  3) Custom location"
    echo -n "Enter choice (1-3): "
    read -r choice
    
    local target_workspace
    case $choice in
        1) target_workspace="$DEFAULT_WORKSPACE" ;;
        2) target_workspace="$HOME/.wp-symlinks" ;;
        3) 
            echo -n "Enter custom path: "
            read -r target_workspace
            target_workspace="${target_workspace/#\~/$HOME}"
            ;;
        *) 
            log_error "Invalid choice"
            return 1
            ;;
    esac
    
    log_info "Setting up workspace at: $target_workspace"
    
    if [[ -f "$SCRIPTS_DIR/setup-workspace.sh" ]]; then
        "$SCRIPTS_DIR/setup-workspace.sh" "$target_workspace"
    else
        log_error "setup-workspace.sh not found in $SCRIPTS_DIR"
        return 1
    fi
}

generate_config() {
    local workspace
    if ! workspace=$(detect_workspace); then
        log_error "No workspace found. Please run setup first."
        return 1
    fi
    
    log_info "Generating configuration..."
    cd "$workspace"
    
    if [[ -f "./generate-config.sh" ]]; then
        ./generate-config.sh
    else
        log_error "generate-config.sh not found in workspace"
        return 1
    fi
}

run_sync() {
    local workspace
    local dry_run="$1"
    
    if ! workspace=$(detect_workspace); then
        log_error "No workspace found. Please run setup first."
        return 1
    fi
    
    cd "$workspace"
    
    if [[ ! -f "./enhanced-reset_wp_symlinks.sh" ]]; then
        log_error "enhanced-reset_wp_symlinks.sh not found in workspace"
        return 1
    fi
    
    local args=()
    if [[ "$dry_run" == "true" ]]; then
        args+=("--dry-run")
        log_info "Running in preview mode (no changes will be made)..."
    else
        log_warning "Running in LIVE mode - changes will be made!"
        echo -n "Continue? (y/N): "
        read -r confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            log_info "Operation cancelled"
            return 0
        fi
    fi
    
    echo
    ./enhanced-reset_wp_symlinks.sh "${args[@]}"
}

run_interactive() {
    local workspace
    if ! workspace=$(detect_workspace); then
        log_error "No workspace found. Please run setup first."
        return 1
    fi
    
    cd "$workspace"
    log_info "Running in interactive mode..."
    echo
    ./enhanced-reset_wp_symlinks.sh --interactive
}

view_config() {
    local workspace
    if ! workspace=$(detect_workspace); then
        log_error "No workspace found. Please run setup first."
        return 1
    fi
    
    if [[ -f "$workspace/symlink-config.json" ]]; then
        log_info "Current configuration:"
        echo
        jq '.' "$workspace/symlink-config.json"
    else
        log_warning "No configuration file found. Run 'Generate configuration' first."
    fi
}

restore_backup() {
    local workspace
    if ! workspace=$(detect_workspace); then
        log_error "No workspace found. Please run setup first."
        return 1
    fi
    
    cd "$workspace"
    
    if [[ -f "./restore-from-backup.sh" ]]; then
        ./restore-from-backup.sh
    else
        log_error "restore-from-backup.sh not found in workspace"
        return 1
    fi
}

list_backups() {
    local workspace
    if ! workspace=$(detect_workspace); then
        log_error "No workspace found. Please run setup first."
        return 1
    fi
    
    local backup_dir="$workspace/backups"
    if [[ ! -d "$backup_dir" ]]; then
        log_warning "No backup directory found"
        return 1
    fi
    
    local backups=($(find "$backup_dir" -maxdepth 1 -type d -name "*_[0-9]*_[0-9]*" | sort -r))
    
    if [[ ${#backups[@]} -eq 0 ]]; then
        log_warning "No backups found"
        return 1
    fi
    
    log_info "Available backups:"
    for backup in "${backups[@]}"; do
        local backup_name=$(basename "$backup")
        local backup_date=$(echo "$backup_name" | grep -o '[0-9]\{8\}_[0-9]\{6\}')
        local formatted_date=$(echo "$backup_date" | sed 's/\([0-9]\{4\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)_\([0-9]\{2\}\)\([0-9]\{2\}\)\([0-9]\{2\}\)/\1-\2-\3 \4:\5:\6/')
        local size=$(du -sh "$backup" | cut -f1)
        
        echo "  📦 $backup_name"
        echo "     Date: $formatted_date, Size: $size"
    done
}

show_help() {
    cat << EOF

${CYAN}WordPress Symlink Manager Help${NC}

${YELLOW}Quick Start:${NC}
1. Run option 1 to set up your workspace
2. Run option 3 to preview what will be symlinked
3. Run option 4 to execute the symlinks

${YELLOW}Common Workflows:${NC}

${GREEN}First Time Setup:${NC}
  1 → 3 → 4

${GREEN}Daily Use:${NC}
  3 → 4 (preview then execute)

${GREEN}After Adding New Sites:${NC}
  2 → 3 → 4 (regenerate config, preview, execute)

${GREEN}When Things Go Wrong:${NC}
  7 (restore from backup)

${YELLOW}Files and Locations:${NC}
- Workspace: $(detect_workspace 2>/dev/null || echo "Not set up yet")
- Configuration: symlink-config.json (auto-generated)
- Backups: backups/ directory
- Documentation: README.md, MIGRATION.md

${YELLOW}Command Line Usage:${NC}
You can also run scripts directly from your workspace:
  ./enhanced-reset_wp_symlinks.sh --dry-run
  ./generate-config.sh
  ./restore-from-backup.sh

EOF
}

main() {
    while true; do
        show_header
        show_status
        show_menu
        
        read -r choice
        echo
        
        case $choice in
            1) setup_workspace ;;
            2) generate_config ;;
            3) run_sync "true" ;;
            4) run_sync "false" ;;
            5) run_interactive ;;
            6) view_config ;;
            7) restore_backup ;;
            8) list_backups ;;
            9) show_help ;;
            0) 
                log_info "Goodbye!"
                exit 0
                ;;
            *)
                log_error "Invalid choice. Please enter 0-9."
                ;;
        esac
        
        echo
        echo -n "Press Enter to continue..."
        read -r
    done
}

# Check dependencies for menu options that need them
check_jq() {
    if ! command -v jq &> /dev/null; then
        log_warning "jq not installed - some features may not work properly"
        log_info "Install with: brew install jq"
    fi
}

# Run main function
check_jq
main